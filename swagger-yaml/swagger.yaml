---
swagger: "2.0"
info:
  description: "This is the documentation for the ProbannoWeb API, available for academic\
    \ public use at \n[http://probannoweb.systemsbiology.net/api](http://probannoweb.systemsbiology.net/api)\
    \ \n"
  version: "1.0.0"
  title: "ProbannoWebAPI"
  contact:
    email: "kingb12@cs.washington.edu"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "virtserver.swaggerhub.com"
basePath: "/kingb12/ProbannoWeb/1.0.0"
tags:
- name: "probanno"
  description: "Everything about reaction likelihoods"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "model"
  description: "Everything about metabolic models"
- name: "session"
  description: "Operations about sessions"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /session:
    get:
      tags:
      - "session"
      summary: "Get a new session"
      description: "Get a new session token, a UUID associated with all actions for\
        \ this session. This is in lieu of more sophisticated authorization schemes."
      operationId: "getSession"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Session"
  /probanno/calculate:
    get:
      tags:
      - "probanno"
      summary: "Calculate Reaction Likelihoods"
      description: "Calculate reaction likelihoods by Uniprot taxonomic identifier"
      operationId: "calculateLikelihoodsGet"
      produces:
      - "application/json"
      parameters:
      - name: "fasta_id"
        in: "query"
        description: "Uniprot taxonomic identifier for target genome sequence (FASTA)"
        required: true
        type: "string"
      - name: "session"
        in: "header"
        description: "Session to associate with this job"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Job"
        400:
          description: "Bad or missing session"
        404:
          description: "FASTA not found"
    put:
      tags:
      - "probanno"
      summary: "Calculate reaction likelihoods"
      description: "Calculate reaction likelihoods by FASTA file"
      operationId: "calculateLikelihoodsPut"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "fasta"
        in: "formData"
        description: "Target genome sequence in FASTA format"
        required: true
        type: "file"
      - name: "session"
        in: "header"
        description: "Session to associate with this job"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Job"
        400:
          description: "Bad or missing session"
        404:
          description: "FASTA not found"
  /probanno:
    get:
      tags:
      - "probanno"
      summary: "Retrieve reaction likelihoods"
      description: "Retrieve reaction likelihoods"
      operationId: "getLikelihoods"
      produces:
      - "application/json"
      parameters:
      - name: "fasta_id"
        in: "query"
        description: "Uniprot taxonomic identifier for target genome sequence (FASTA)"
        required: true
        type: "string"
      - name: "session"
        in: "header"
        description: "Session associated with the job in which they were calculated"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ReactionLikelihood"
        400:
          description: "Bad or missing session"
        404:
          description: "FASTA not found"
  /probanno/download:
    get:
      tags:
      - "probanno"
      summary: "Download reaction likelihoods"
      description: "Download reaction likelihoods"
      operationId: "downloadReactions"
      produces:
      - "text/plain"
      parameters:
      - name: "fasta_id"
        in: "query"
        description: "Uniprot taxonomic identifier for target genome sequence (FASTA)"
        required: true
        type: "string"
      - name: "session"
        in: "header"
        description: "Session associated with the job in which they were calculated"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ReactionLikelihood"
        400:
          description: "Bad or missing session"
        404:
          description: "FASTA not found"
  /probanno/list:
    get:
      tags:
      - "probanno"
      summary: "List calculated reaction likelihoods"
      description: "List reaction likelihoods calculated within this session. Only\
        \ includes likelihoods associated with COMPLETE jobs, not failures or in progress\
        \ jobs."
      operationId: "listLikelihoods"
      produces:
      - "application/json"
      parameters:
      - name: "session"
        in: "header"
        description: "Session associated with the job in which they were calculated"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LikelihoodSummary"
        400:
          description: "Bad or missing session"
        404:
          description: "FASTA not found"
  /model:
    get:
      tags:
      - "model"
      summary: "Retrieve metabolic model"
      description: "Retrieve metabolic model as JSON"
      operationId: "getModel"
      produces:
      - "application/json"
      parameters:
      - name: "model_id"
        in: "query"
        description: "ID for the model to be downloaded"
        required: true
        type: "string"
      - name: "session"
        in: "header"
        description: "Session associated with the job in which they were calculated"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Model"
        400:
          description: "No session, bad session, or missing arguments"
        404:
          description: "Model not found"
    post:
      tags:
      - "model"
      summary: "Upload metabolic model"
      description: "Upload metabolic model as JSON"
      operationId: "createModel"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "model_id"
        in: "query"
        description: "ID for the model to be uploaded"
        required: true
        type: "string"
      - name: "file"
        in: "formData"
        description: "Model to be uploaded"
        required: true
        type: "string"
        format: "application/json"
      - name: "session"
        in: "header"
        description: "Session associated with the job in which they were calculated"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Model"
        400:
          description: "No session, bad session, or missing arguments"
        404:
          description: "Model not found"
    put:
      tags:
      - "model"
      summary: "Upload metabolic model"
      description: "Upload metabolic model as JSON"
      operationId: "updateModel"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "model_id"
        in: "query"
        description: "ID for the model to be uploaded"
        required: true
        type: "string"
      - name: "file"
        in: "formData"
        description: "Model to be uploaded"
        required: true
        type: "string"
        format: "application/json"
      - name: "session"
        in: "header"
        description: "Session associated with the job in which they were calculated"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Model"
        400:
          description: "No session, bad session, or missing arguments"
        404:
          description: "Model not found"
  /model/download:
    get:
      tags:
      - "model"
      summary: "Retrieve metabolic model as file"
      description: "Retrieve metabolic model as JSON file"
      operationId: "downloadModel"
      produces:
      - "application/json"
      parameters:
      - name: "model_id"
        in: "query"
        description: "ID for the model to be downloaded"
        required: true
        type: "string"
      - name: "session"
        in: "header"
        description: "Session associated with the job in which they were calculated"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Model"
        400:
          description: "No session, bad session, or missing arguments"
        404:
          description: "Model not found"
  /model/gapfill:
    get:
      tags:
      - "model"
      summary: "probabilistically gap-fill a metabolic model"
      description: "Run a probabilistic gap-filling with a model"
      operationId: "gapfillModel"
      produces:
      - "application/json"
      parameters:
      - name: "model_id"
        in: "query"
        description: "metabolic model to gapfill"
        required: true
        type: "string"
      - name: "output_id"
        in: "query"
        description: "output ID for the gap-filled metabolic model"
        required: true
        type: "string"
      - name: "fasta_id"
        in: "query"
        description: "reaction likelihoods ID to inform gap-filling"
        required: true
        type: "string"
      - name: "template"
        in: "query"
        description: "Template model to inform gap-filling"
        required: false
        type: "string"
        enum:
        - "GramPositive"
        - "GramNegative"
        - "Microbial"
      - name: "session"
        in: "header"
        description: "Session associated with the job in which they were calculated"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Job"
        400:
          description: "No session, bad session, or missing arguments"
        404:
          description: "Reaction likelihoods or model not found"
  /model/list:
    get:
      tags:
      - "model"
      summary: "List metabolic models"
      description: "List metabolic models associated with the session"
      operationId: "listModel"
      produces:
      - "application/json"
      parameters:
      - name: "session"
        in: "header"
        description: "Session associated with the job in which they were calculated"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
              description: "Model IDs"
        400:
          description: "No session or bad session"
  /job:
    get:
      tags:
      - "job"
      summary: "Retrieve job status"
      description: "Retrieve job status object"
      operationId: "getJob"
      produces:
      - "application/json"
      parameters:
      - name: "job_id"
        in: "query"
        description: "UUID of the job to retrieve"
        required: true
        type: "string"
      - name: "session"
        in: "header"
        description: "Session associated with the job"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Job"
        400:
          description: "Bad or missing session"
        404:
          description: "Job not found"
  /job/list:
    get:
      tags:
      - "job"
      summary: "Retrieve all job statuses"
      description: "Retrieve all job status objects"
      operationId: "listJob"
      produces:
      - "application/json"
      parameters:
      - name: "session"
        in: "header"
        description: "Session associated with the job"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Job"
        400:
          description: "Bad or missing session"
definitions:
  Job:
    type: "object"
    properties:
      jid:
        type: "string"
        format: "uuid"
        example: "a70a6344-3c55-48fa-8b60-db71858e810b"
      target:
        type: "string"
        example: "my_model"
        description: "ID of the object targeted by the job (model for gap-filling,\
          \ fasta_id for probanno)"
  Session:
    type: "string"
    format: "uuid"
    description: "Unique session identifier"
    example: "a70a6344-3c55-48fa-8b60-db71858e810b"
  ReactionLikelihood:
    type: "object"
    properties:
      reaction:
        type: "string"
        example: "rxn00594_c"
      type:
        type: "string"
        example: "HASCOMPLEXES"
      gpr:
        type: "string"
        example: "sp|Q58092|TKTC_METJA Putative transketolase C-terminal section OS=Methanocaldococcus\
          \ jannaschii (strain ATCC 43067 / DSM 2661 / JAL-1 / JCM 10045 / NBRC 100440)\
          \ GN=MJ0679 PE=5 SV=1"
      probability:
        type: "number"
        example: 0.88585
      complexes:
        type: "array"
        items:
          $ref: "#/definitions/Complex"
  LikelihoodSummary:
    type: "object"
    properties:
      fasta_id:
        type: "string"
        example: "267377"
      name:
        type: "string"
        example: "Methanococcus maripaludis S2"
  Complex:
    type: "object"
    properties:
      complex:
        type: "string"
        example: "cpx00466"
      type:
        type: "string"
        example: "CPLX_PARTIAL_1_of_2"
      probability:
        type: "number"
        example: 0.55
  Model:
    type: "object"
    description: "a CobraPy Model in JSON format. See cobra.io.json for more info"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
